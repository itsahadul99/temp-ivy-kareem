<link rel="preload" href="{{ 'Left_Click.mp4' | asset_url }}" as="video">
<link rel="preload" href="{{ 'Right_Click.mp4' | asset_url }}" as="video">

<style>


  video {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
    -webkit-transform: translate3d(0, 0, 0);
    z-index: 1;
  }

  video.default {
    opacity: 1;
    z-index: 2;
  }

  video.active {
    opacity: 1;
    z-index: 3;
  }

  /* Hover areas */
  .hover-left,
  .hover-right {
    position: absolute;
    top: 0;
    width: 50%;
    height: 100%;
    z-index: 10;
  }

  .hover-left { left: 0; }
  .hover-right { right: 0; }

  @media screen and (max-width: 799px) {
    .video-container {
      width: 700px;
      height: 98%;
      clip-path: inset(22% 0 0 0);
    }
    
    /* Hide hover areas on mobile */
    .hover-left,
    .hover-right {
      display: none;
    }
  }
</style>

<div class="justify-center">
  <div class="md:flex items-center">
    <div class=" w-full">
        <div class="py-[24.5px] md:mt-52 h-[83px] group hover:italic cursor-pointer justify-items-center">
          <button class="w-[40px] h-[40px] text-black rounded-full flex items-center justify-center border-black border-2 transition-all duration-500 ease-in-out group-hover:text-white group-hover:bg-[#6CA082] group-hover:border-[#6CA082]">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-[15.7px] h-[15.7px]">
              <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
            </svg>
          </button>
          <p class="text-black text-[28px] transition-all duration-500 ease-in-out group-hover:text-[#6CA082] mt-[14px]" style="font-family: 'Minion Pro'">
            Explore Us
          </p>
        </div>
    </div>
  </div>
</div>

<script>
  // Initialize videos when DOM is loaded
  document.addEventListener('DOMContentLoaded', function() {
    // Preload videos
    const videos = document.querySelectorAll('video');
    videos.forEach(video => {
      video.load();
    });

    // Set default video to play automatically
    const defaultVideo = document.querySelector('.default');
    if (defaultVideo) {
      defaultVideo.play().catch(e => console.log('Autoplay prevented:', e));
    }
  });

  function playVideo(videoId) {
    const video = document.getElementById(videoId);
    const defaultVideo = document.querySelector('.default');
    
    if (video && defaultVideo) {
      defaultVideo.classList.remove('active');
      video.classList.add('active');
      video.play().catch(e => console.log('Play prevented:', e));
    }
  }

  function pauseVideo(videoId) {
    const video = document.getElementById(videoId);
    const defaultVideo = document.querySelector('.default');
    
    if (video && defaultVideo) {
      video.classList.remove('active');
      defaultVideo.classList.add('active');
      video.pause();
      video.currentTime = 0;
    }
  }
</script>